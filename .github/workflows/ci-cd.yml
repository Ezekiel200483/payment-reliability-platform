# CI/CD Pipeline for SRE Financial Services Platform
# This pipeline demonstrates SRE best practices for reliable deployments

name: SRE Platform CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy bandit safety

      - name: Code formatting check
        run: black --check --diff .

      - name: Import sorting check
        run: isort --check-only --diff .

      - name: Linting
        run: flake8 .

      - name: Type checking
        run: mypy services/

      - name: Security scan
        run: bandit -r services/

      - name: Dependency vulnerability scan
        run: safety check

  # Unit and Integration Tests
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov pytest-xdist

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
        run: |
          pytest tests/unit/ -v --cov=services --cov-report=xml --cov-report=term-missing

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
        run: |
          pytest tests/integration/ -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Container Security Scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t payment-service:latest ./services/payment-service

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'payment-service:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Docker Compose Validation
  docker-validation:
    name: Docker Compose Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Docker Compose
        run: docker-compose config

      - name: Check Docker Compose services
        run: |
          docker-compose pull
          docker-compose build --no-cache payment-service

  # Load Testing
  load-test:
    name: Load Testing
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Compose
        run: |
          docker-compose up -d payment-service postgres redis
          sleep 30  # Wait for services to be ready

      - name: Wait for services to be healthy
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'

      - name: Run k6 load test
        uses: grafana/k6-action@v0.3.0
        with:
          filename: testing/load/payment-load-test.js
        env:
          BASE_URL: http://localhost:8000

      - name: Upload load test results
        uses: actions/upload-artifact@v4
        with:
          name: load-test-results
          path: load-test-results.json

  # Build and Push Container Images
  build:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: [code-quality, test, container-security]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/payment-service
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./services/payment-service
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Docker Compose Deployment to Staging
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, docker-validation, load-test]
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy with Docker Compose
        run: |
          # Pull latest images
          docker-compose pull
          
          # Deploy services
          docker-compose up -d --build
          
          # Wait for services to be ready
          sleep 30

      - name: Run smoke tests
        run: |
          # Wait for payment service to be healthy
          timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
          
          # Run smoke test script
          bash testing/smoke-tests.sh

      - name: Notify deployment status
        if: always()
        run: |
          echo "Deployment to staging completed with status: ${{ job.status }}"

  # Production Deployment (Manual Approval)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pre-deployment validation
        run: |
          # Validate Docker Compose configuration
          docker-compose config
          
          # Check if services are accessible
          docker-compose ps

      - name: Deploy to production
        run: |
          # Deploy new version
          docker-compose pull
          docker-compose up -d --build
          
          # Wait for deployment to be ready
          sleep 60

      - name: Run production smoke tests
        run: |
          # Run comprehensive production smoke tests
          bash testing/production-smoke-tests.sh

      - name: Monitor deployment
        run: |
          # Monitor key metrics for 5 minutes
          echo "Monitoring deployment health..."
          sleep 300
          
          # Run comprehensive health check
          python scripts/check-deployment-health.py

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Rolling back deployment..."
          docker-compose down
          docker-compose up -d

      - name: Notify production deployment
        if: always()
        run: |
          echo "ðŸš€ Production deployment completed"
          echo "Environment: Production"
          echo "Version: ${{ github.sha }}"
          echo "Status: ${{ job.status }}"

  # Post-deployment monitoring
  post-deployment:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Setup monitoring validation
        run: |
          # Validate monitoring stack is running
          echo "Validating monitoring stack..."
          
          # Check Prometheus metrics
          timeout 30 bash -c 'until curl -f http://localhost:9090/-/healthy; do sleep 2; done' || echo "Prometheus not accessible"
          
          # Check Grafana
          timeout 30 bash -c 'until curl -f http://localhost:3000/api/health; do sleep 2; done' || echo "Grafana not accessible"

      - name: Create deployment record
        run: |
          # Record deployment in local logs
          echo "$(date -u +%Y-%m-%dT%H:%M:%SZ) - Deployment completed" >> deployment.log
          echo "Service: payment-service" >> deployment.log
          echo "Version: ${{ github.sha }}" >> deployment.log
          echo "Environment: production" >> deployment.log
          echo "Author: ${{ github.actor }}" >> deployment.log
          echo "---" >> deployment.log

      - name: Archive deployment logs
        uses: actions/upload-artifact@v4
        with:
          name: deployment-logs
          path: deployment.log
